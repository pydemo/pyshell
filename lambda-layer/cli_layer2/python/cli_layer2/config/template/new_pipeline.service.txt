import os, sys, csv, time, logging
import datetime, decimal
from os.path import split, join, isdir, basename, isfile
from pprint import pprint as pp
from cli_layer.include.utils import timer, get_err
from pathlib import Path
from cli_layer.include.common import *
from cli_layer.include.fmt import  pfmt, psql, pfmtd

import  cli_layer.include.wsdl as wsdl

e=sys.exit

log = logging.getLogger('cli')

SERVICE='{service_name}'


def get_params(**kwargs):
    params = kwargs['params']
    assert params, params
    cp=dict()
    if type(params) in [tuple]:
    
        cp = {pid:p for pid,p in enumerate(params)}
    else:
        assert type(params) in [str]
        cp[0]=params
    pfmtd([cp], 'Params.')
    return cp, params
@timer (basename(__file__))
def main(**kwargs):
    usage(**kwargs)
    cp, params=get_params(**kwargs)
    
def check_pcount(params,pcount):
    
    if pcount == 1:
        assert params, 'Empty params.'
        assert type(params) in [str], params
        return
    
    assert len(params)==pcount, '%d - wrong parameter count (expecting %d)' % (len(params),pcount)
    
def usage(**kwargs):
    pfmtd([kwargs], 'Kwargs.')

    params = kwargs['params']
    pcount={new_ppl_nop}
    try:
        if kwargs['help']:
            assert False, 'Show usage.'    
        check_pcount(params,pcount)
        
        assert pcount=={new_ppl_nop}+1 #remove

    except Exception as err:
        error=get_err()
        perr(error)
        pfmtd([dict(Usage=r"""
USAGE:

    python cli.py -nop 1 -r DEV -p {new_ppl_dir} -pa {new_ppl_params}
        
    Number of input paramenters [-nop]:
        "{new_ppl_nop}" - count of pipeline params in "-pa" option.
        
    Runtime environment [-r]:
        "DEV" - runtime name (DEV/UAT/PROD)
        
    Pipeline name [-p]:
        "{new_ppl_dir}" - pipeline description.
    
    Pipeline parameters [-pa]:
{new_ppl_param_list}
""")])

        e(FAILURE)



    